mod error;

use async_trait::async_trait;
use cosmian_kmip::kmip::kmip_objects::Object;

pub use crate::error::{HsmError, HsmResult};
pub mod reexports {
    pub mod kmip {
        pub use cosmian_kmip::kmip::kmip_objects::Object;
    }
}

pub enum HsmKeyAlgorithm {
    AES,
}

pub enum HsmKeypairAlgorithm {
    RSA,
}

pub enum HsmObject {
    Any,
    AesKey,
    RsaKey,
    RsaPrivateKey,
    RsaPublicKey,
}

#[async_trait(?Send)]
pub trait Hsm {
    /// Create the given key in the HSM.
    /// The key ID will be generated by the HSM and returned.
    ///
    /// The key will be extractable.
    async fn create_key(
        &self,
        slot_id: usize,
        algorithm: HsmKeyAlgorithm,
        key_length_in_bits: usize,
        label: &str,
    ) -> HsmResult<usize>;

    /// Create the given key pair in the HSM.
    /// The private key ID and Public key will be generated by the HSM
    /// and returned in that order.
    ///
    /// The keypair will be extractable.
    async fn create_keypair(
        &self,
        slot_id: usize,
        algorithm: HsmKeypairAlgorithm,
        key_length_in_bits: usize,
        label: &str,
    ) -> HsmResult<(usize, usize)>;

    /// Retrieve objects from the HSN.
    async fn retrieve(&self, slot_id: usize, object_id: usize) -> HsmResult<Object>;

    /// Delete an object from the HSM.
    async fn delete(&self, slot_id: usize, object_id: usize) -> HsmResult<()>;

    /// Find objects in the HSM.
    async fn find(&self, slot_id: usize, object_type: HsmObject) -> HsmResult<Vec<String>>;
}
